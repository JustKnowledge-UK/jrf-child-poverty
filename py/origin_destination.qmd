---
title: "Untitled"
format:    
    html:  
        embed-resources: true
        code-fold: true
execute:
    message: false
    warning: false

---

```{python}
import pandas as pd
import requests
from bs4 import BeautifulSoup
import re
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
import contextily as cx
from adjustText import adjust_text
import configparser
import psycopg2
import os
import pickle
import numpy as np
from sklearn.neighbors import BallTree, radius_neighbors_graph
from scipy.spatial import cKDTree
import janitor
import zipfile
import glob

config = configparser.ConfigParser()
config.read(os.path.join('..', 'db_config.ini'))

db_params = dict(config['postgresql'])
```


```{python}
query = '''
        SELECT DISTINCT msoa21cd
        FROM pcode_census21_lookup 
        WHERE ladnm = 'Haringey'
        '''


with psycopg2.connect(**db_params) as con:
    
    lookup = pd.read_sql(con=con, sql=query)

formatted_list = ', '.join([f"'{district}'" for district in lookup['msoa21cd'].tolist()])

# query2 = f'''
#     SELECT * 
#     FROM census21_od_workplace_msoa
#     WHERE msoa21cd_residence IN ({formatted_list})
#     OR msoa21cd_workplace IN ({formatted_list})
#     '''

# Union approach much more efficient. Union removes duplicates. note if I wanted duplciates I could use UNION ALL
query3 = f'''SELECT * FROM census21_od_workplace_msoa
            WHERE msoa21cd_residence IN ({formatted_list})

            UNION

            SELECT * FROM census21_od_workplace_msoa
            WHERE msoa21cd_workplace IN ({formatted_list});
            '''
od_data = pd.read_sql(con=con, sql=query3)

od_data.to_pickle(os.path.join('..','data','od_data.pkl'))

od_data2 = od_data.copy()

# Sum across type of workplace as we're not interseted in differentiating these
# od_data2['count'] = od_data2.groupby(['msoa21cd_residence','msoa21cd_workplace'])['count'].transform('sum')
# # This is where the duplicates come from
# od_data2 = od_data2.drop_duplicates(subset=['msoa21cd_residence','msoa21cd_workplace','place_of_work_indicator_code'])

cols_to_keep = [
    'msoa21cd_residence',
    'msoa21cd_workplace',
    'count'
]
od_data2 = od_data2[cols_to_keep]

# # Get output areas for Northumberland Park
# query = '''
#         SELECT DISTINCT oa21cd FROM 
#         pcode_census21_lookup 
#         WHERE msoa21cd = 'E02000398'

# '''

# np_oas = pd.read_sql(con=con, sql=query)['oa21cd'].tolist()

# np_oas.to_pickle(os.path.join('..','data','np_oas.pkl'))
# output_dir = os.path.join('..','data')
# # Pickle 
# with open(os.path.join(output_dir, 'np_oas.pkl'), 'wb') as f:
#     pickle.dump(np_oas, f)



# query = '''
#         SELECT DISTINCT oa21cd FROM 
#         pcode_census21_lookup 
#         WHERE msoa21cd = 'E02006794'

# '''
# ths_oas = pd.read_sql(con=con, sql=query)['oa21cd'].tolist()
# ths_oas.to_pickle(os.path.join('..','data','ths_oas.pkl'))

# # Pickle 
# with open(os.path.join(output_dir, 'ths_oas.pkl'), 'wb') as f:
#     pickle.dump(ths_oas, f)

# This is erroneous - drop for now
# conditions = [
#     (od_data2['msoa21cd_residence'] == 'E02000398'),
#     (od_data2['msoa21cd_workplace'] == 'E02000398'),
#     (od_data2['msoa21cd_residence'] == 'E02006794'),
#     (od_data2['msoa21cd_workplace']== 'E02006794')
# ]

# choices = ['np_residence', 'np_workplace','ths_residence','ths_workplace']

# # Apply the conditions
# od_data2['location'] = np.select(conditions, choices, default='other')

np_code = 'E02000398'
ths_code = 'E02006794'
```

How to explore this?

I think count the employment by workplace adn see wehre they're coming from. we can then label counts absed on location

# Where do NP residents work

```{python}
#| include: false
np_residents = od_data2[od_data2['msoa21cd_residence'] == np_code]
#  Maybe chuck a bar plot for context here too
ax = np_residents.groupby('msoa21cd_workplace')['count'].sum()\
    .div(np_residents['count'].sum())\
    .mul(100)\
    .sort_values(ascending=False)\
    .head(20)\
    .plot(kind='barh')

ax.set_xlabel('Percentage of Total Residence Population (%)')
ax.set_ylabel('MSOA Workplace Code')
ax.set_title(f'Top 20 place where residents in {np_code} work')

```

```{python}
#| include: false
# Example: Where do people who live in NP work?
# np_residents = od_data2[od_data2['location']=='np_residence']

workplace_counts = np_residents.groupby('msoa21cd_workplace')['count'].sum().reset_index()
workplace_counts['percentage'] = workplace_counts['count'].div(workplace_counts['count'].sum()) * 100

areas_of_interest = workplace_counts['msoa21cd_workplace'].tolist() + ['E02000398','E02006794']
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')

msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf1.pkl'))

geo_df = msoa_gdf.merge(workplace_counts, left_on='msoa21cd', right_on='msoa21cd_workplace', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title="Where NP Residents Work (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()


```

# Where do THS workers live

```{python}
# ths_workers = od_data2[od_data2['location']=='ths_workplace']
ths_workers = od_data2[od_data2['msoa21cd_workplace']==ths_code]
#  Maybe chuck a bar plot for context here too
# ths_workers.groupby('msoa21cd_residence')['count'].sum().sort_values(ascending=False).head(20).plot(kind='barh')

ax = ths_workers.groupby('msoa21cd_residence')['count'].sum()\
    .div(ths_workers['count'].sum())\
    .mul(100)\
    .sort_values(ascending=False)\
    .head(20)\
    .plot(kind='barh')

ax.set_xlabel('Percentage of Total Workplace Population (%)')
ax.set_ylabel('MSOA Residence Code')
ax.set_title(f'Top 20 places where workers in {ths_code} live')

```
```{python}
#| include: false
residence_counts = ths_workers.groupby('msoa21cd_residence')['count'].sum().reset_index()
residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()) * 100

areas_of_interest = residence_counts['msoa21cd_residence'].tolist() + ['E02000398','E02006794']
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')
msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf2.pkl'))
geo_df = msoa_gdf.merge(residence_counts, left_on='msoa21cd', right_on='msoa21cd_residence', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title="Where THS Workers Live (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()


```



```{python}
# etst with log
residence_counts = ths_workers.groupby('msoa21cd_residence')['count'].sum().reset_index()
residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()) * 100
residence_counts['log_percentage'] = np.log(residence_counts['percentage'])

areas_of_interest = residence_counts['msoa21cd_residence'].tolist() + ['E02000398','E02006794']
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')
msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf2.pkl'))
geo_df = msoa_gdf.merge(residence_counts, left_on='msoa21cd', right_on='msoa21cd_residence', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='log_percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    hover_data={'percentage': ':.2f'},
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title="Where THS Workers Live (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()


```

```{python}
# static version
import geopandas as gpd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

# Assuming ths_workers, con are already defined
residence_counts = ths_workers.groupby('msoa21cd_residence')['count'].sum().reset_index()
residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()) * 100
residence_counts['log_percentage'] = np.log(residence_counts['percentage'])

# Include specific additional areas
areas_of_interest = residence_counts['msoa21cd_residence'].tolist() + ['E02000398', 'E02006794']
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
    SELECT DISTINCT foo.*, loo.ladnm, poo.rgn21nm
    FROM msoa21_boundaries foo
    LEFT JOIN pcode_census21_lookup loo
    ON foo.msoa21cd = loo.msoa21cd
    LEFT JOIN lad21_lookup poo
    ON loo.ladnm = poo.lad21nm
    WHERE foo.msoa21cd IN ({formatted_list})
'''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')

# Optional: Save for reuse
msoa_gdf.to_pickle(os.path.join('..', 'data', 'msoa_gdf3.pkl'))

# Merge with residence data
geo_df = msoa_gdf.merge(residence_counts, left_on='msoa21cd', right_on='msoa21cd_residence', how='left')

# Ensure CRS is appropriate for plotting
geo_df = geo_df.to_crs(epsg=3857)  # Web Mercator for plotting with Matplotlib

```

```{python}
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib as mpl

geo_df2 = geo_df.loc[geo_df['rgn21nm']=='London']

# Plotting
fig, ax = plt.subplots(figsize=(10, 10))

# Plot geometries colored by log_percentage
geo_df2.plot(
    column='log_percentage',
    cmap='viridis',
    linewidth=0.5,
    edgecolor='white',
    # legend=True,
    # legend_kwds={'label': 'Log percentage of workers'},
    ax=ax,
    missing_kwds={
        "color": "lightgrey",
        "label": "No data",
    },
    alpha=0.8
)
cx.add_basemap(ax, crs=geo_df2.crs, source=cx.providers.OpenStreetMap.Mapnik)
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.1)

# Create a dummy mappable for the colorbar
norm = mpl.colors.Normalize(vmin=geo_df2['log_percentage'].min(), vmax=geo_df2['log_percentage'].max())
cmap = plt.cm.viridis
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm._A = []

# Draw the colorbar in the new axes (same height)
cbar = fig.colorbar(sm, cax=cax)
cbar.set_label('Log percentage of workers')

# Format plot
ax.set_title("Where Workers in the Tottenham Hostpur area live (Limited to London residences)", fontsize=14)
ax.axis('off')

plt.tight_layout()
plt.show()


fig.savefig(os.path.join('..','outputs','session3','ths_area_worker_residence_london.png'), dpi=600)

areas = ['Haringey','Enfield','Waltham Forest','Islington']
geo_df3 = geo_df.loc[geo_df['ladnm'].isin(areas)]

# Plotting
fig, ax = plt.subplots(figsize=(10, 10))

# Plot geometries colored by log_percentage
geo_df3.plot(
    column='log_percentage',
    cmap='viridis',
    linewidth=0.5,
    edgecolor='white',
    # legend=True,
    # legend_kwds={'label': 'Log percentage of workers'},
    ax=ax,
    missing_kwds={
        "color": "lightgrey",
        "label": "No data",
    },
    alpha=0.8
)
cx.add_basemap(ax, crs=geo_df3.crs, source=cx.providers.OpenStreetMap.Mapnik)
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.1)

# Create a dummy mappable for the colorbar
norm = mpl.colors.Normalize(vmin=geo_df3['log_percentage'].min(), vmax=geo_df3['log_percentage'].max())
cmap = plt.cm.viridis
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm._A = []

# Draw the colorbar in the new axes (same height)
cbar = fig.colorbar(sm, cax=cax)
cbar.set_label('Log percentage of workers', fontsize=12)

# Format plot
ax.set_title(f"Where Workers in the Tottenham Hostpur area live (Limited to {', '.join(areas)})", fontsize=14)
ax.axis('off')

plt.tight_layout()
plt.show()


fig.savefig(os.path.join('..','outputs','session3','ths_area_worker_residence_haringey_and_locality.png'), dpi=600)



```

NOTE: We may need to do something differnet with place of work stuff. but it does actually include it..

Can we do something similar for a different stadium and see the area of effect?


also maybe think about where people are working as in working pattern

Repeat the THS workers for another stadium

# Emirates 

```{python}
#| include: false
# Get the records for emirates 
emirates_code = 'E02000564'
formatted_list = ', '.join([f"'{district}'" for district in [emirates_code]])


query3 = f'''SELECT * FROM census21_od_workplace_msoa
            WHERE msoa21cd_workplace IN ({formatted_list})

            UNION

            SELECT * FROM census21_od_workplace_msoa
            WHERE msoa21cd_residence IN ({formatted_list});
            '''
emirates_od_data = pd.read_sql(con=con, sql=query3)
```

```{python}
#| include: false
emirates_residents = emirates_od_data[emirates_od_data['msoa21cd_residence'] == emirates_code]
#  Maybe chuck a bar plot for context here too
ax = emirates_residents.groupby('msoa21cd_workplace')['count'].sum()\
    .div(emirates_residents['count'].sum())\
    .mul(100)\
    .sort_values(ascending=False)\
    .head(20)\
    .plot(kind='barh')

ax.set_xlabel('Percentage of Total Residence Population (%)')
ax.set_ylabel('MSOA Workplace Code')
ax.set_title(f'Top 20 place where residents in {emirates_code} work')

```

```{python}
#| include: false
# Example: Where do people who live in NP work?
# np_residents = od_data2[od_data2['location']=='np_residence']

workplace_counts = emirates_residents.groupby('msoa21cd_workplace')['count'].sum().reset_index()
workplace_counts['percentage'] = workplace_counts['count'].div(workplace_counts['count'].sum()) * 100

areas_of_interest = workplace_counts['msoa21cd_workplace'].tolist() + ['E02000398','E02006794']
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')

msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf1.pkl'))

geo_df = msoa_gdf.merge(workplace_counts, left_on='msoa21cd', right_on='msoa21cd_workplace', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title="Where Residents Work (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()


```

```{python}
#| include: false
emirates_workers = emirates_od_data[emirates_od_data['msoa21cd_workplace']==emirates_code]


#  Maybe chuck a bar plot for context here too
# ths_workers.groupby('msoa21cd_residence')['count'].sum().sort_values(ascending=False).head(20).plot(kind='barh')

ax = emirates_workers.groupby('msoa21cd_residence')['count'].sum()\
    .div(emirates_workers['count'].sum())\
    .mul(100)\
    .sort_values(ascending=False)\
    .head(20)\
    .plot(kind='barh')

ax.set_xlabel('Percentage of Total Workplace Population (%)')
ax.set_ylabel('MSOA Residence Code')
ax.set_title(f'Top 20 places where workers in {emirates_code} live');

```

```{python}
#| include: false
residence_counts = emirates_workers.groupby('msoa21cd_residence')['count'].sum().reset_index()
residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()) * 100

areas_of_interest = residence_counts['msoa21cd_residence'].tolist() 
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')
msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf3.pkl'))

geo_df = msoa_gdf.merge(residence_counts, left_on='msoa21cd', right_on='msoa21cd_residence', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title=f"Where {emirates_code} workers Live (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()

```

test with rescaled variable

```{python}
#| include: false
residence_counts = emirates_workers.groupby('msoa21cd_residence')['count'].sum().reset_index()
residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()) * 100
residence_counts['log_percentage'] = np.log(residence_counts['percentage'])

areas_of_interest = residence_counts['msoa21cd_residence'].tolist() 
formatted_list = ', '.join([f"'{district}'" for district in areas_of_interest])
query = f'''
        SELECT * 
        FROM msoa21_boundaries
        WHERE msoa21cd IN ({formatted_list})
        '''
msoa_gdf = gpd.read_postgis(con=con, sql=query, geom_col='geometry')
msoa_gdf.to_pickle(os.path.join('..','data','msoa_gdf3.pkl'))

geo_df = msoa_gdf.merge(residence_counts, left_on='msoa21cd', right_on='msoa21cd_residence', how='left')
# geo_df['count'] = geo_df['count'].fillna(0)

import plotly.express as px

# Make sure geometry is in WGS84 (EPSG:4326) for Plotly
geo_df = geo_df.to_crs(epsg=4326)

# Create the Plotly choropleth
fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,  # any unique identifier
    color='log_percentage',
    hover_name='msoa21cd',  # Optional: show code or name
    hover_data={'percentage':':.2f'},
    color_continuous_scale="Viridis",
    mapbox_style="carto-positron",
    center={"lat": geo_df.geometry.centroid.y.mean(), 
            "lon": geo_df.geometry.centroid.x.mean()},
    zoom=9,  # Adjust depending on your area
    opacity=0.6
)

fig.update_layout(
    title=f"Where {emirates_code} workers Live (MSOA level)",
    margin={"r":0,"t":30,"l":0,"b":0}
)
fig.show()

```

can we incroproate distnace into this?

e.g. percetnage x distacne, in bins or simply a 'within 1km' and 'beyond 1km'?

or some bars comparing all stadia

for comparing two areas, do i need to scale taking into account the data for both areas? THS looks like it has lots of employment in nearby earas but actually hte coutns are lwo

# Exploring all stadia workzones

Plan:

1. Use stadia locations as filter for workplace locations in od_data request
2. Use stadium neighbours to flag areas within 1km of the stadium (note exclude the stadium area from this list) and areas beyond 1km of the stadium.

```{python}
# Load the stadium locations
with open(os.path.join('..','data','stadium_locations.pkl'), "rb") as input_file:
    stadia = pickle.load(input_file)

with open(os.path.join('..','data','stadium_neighbours.pkl'), "rb") as input_file:
    stadium_neighbours = pickle.load(input_file)
```


```{python}
results = []
for stadium in stadia['Stadium'].unique():
    stadium_msoa = stadia.loc[stadia['Stadium']==stadium,'msoa21cd'].tolist()[0]
    region = stadia.loc[stadia['Stadium']==stadium,'rgn21nm'].tolist()[0]
    formatted_list = ', '.join([f"'{district}'" for district in [stadium_msoa]])

    query = f'''SELECT * FROM census21_od_workplace_msoa
                WHERE msoa21cd_workplace IN ({formatted_list});
                '''
    stadium_workers = pd.read_sql(con=con, sql=query)

    # Get msoas within 1km
    msoas_within_1km = stadium_neighbours.loc[stadium_neighbours['stadium']==stadium, 'msoa21cd'].unique().tolist()
    # Drop the msoa the stadium is in (do we definitely want to do this?)
    msoas_within_1km = [msoa for msoa in msoas_within_1km if msoa not in stadium_msoa]

    stadium_workers['within_1km'] = stadium_workers['msoa21cd_residence'].isin(msoas_within_1km)

    conditions = [
        (stadium_workers['msoa21cd_residence']==stadium_msoa),
        (stadium_workers['msoa21cd_residence'].isin(msoas_within_1km))
    ]

    choices = ["Stadium","Within 1km"]
    stadium_workers['location'] = np.select(conditions, choices, default="Beyond 1km")

    stadium_workers['stadium'] = stadium
    residence_counts = stadium_workers.groupby(['stadium','location'])['count'].sum().reset_index()
    residence_counts['percentage'] = residence_counts['count'].div(residence_counts['count'].sum()).mul(100)
    residence_counts['log_percentage'] = np.log(residence_counts['percentage'])
    
    residence_counts['region'] = region
    front_cols = ['stadium','location','region']
    residence_counts = residence_counts[front_cols + [col for col in residence_counts.columns if col not in front_cols]]

    results.append(residence_counts)

all_results = pd.concat(results).reset_index(drop=True)

```

Now we plot

```{python}
import matplotlib.pyplot as plt
import seaborn as sns

custom_order = ['Stadium','Within 1km', 'Beyond 1km']

fig, ax = plt.subplots(figsize=(8, 8))

sns.barplot(
    data=all_results, 
    x='percentage', 
    y='stadium', 
    hue='location', 
    hue_order=custom_order,
    ax=ax)

# Optional: rotate x-axis labels if they overlap
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.tight_layout()
plt.show()

```

Just London


```{python}

custom_order = ['Stadium','Within 1km', 'Beyond 1km']

fig, ax = plt.subplots(figsize=(8, 8))

london = all_results.loc[all_results['region']=='London']

sns.barplot(
    data=london, 
    x='percentage', 
    y='stadium', 
    hue='location', 
    hue_order=custom_order,
    ax=ax)


ax.set_xlabel('Percentage')
ax.set_ylabel('')
ax.legend().set_title('')

fig.suptitle('Where workers in a stadium MSOA live')

plt.tight_layout()
plt.show()


fig.savefig(os.path.join('..','outputs','session3','stadium_employment.png'), dpi=600)
```